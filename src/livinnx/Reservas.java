
package livinnx;

import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JButton;


public class Reservas extends javax.swing.JPanel {

    BaseDeDatos db = new BaseDeDatos();
    Connection conectar;
    Usuario usuario1;
    public Reservas(Usuario usuario) {
        initComponents(); 
        this.usuario1 = usuario;
        String directory = "LivinnxBD.accdb"; 
        conectar= db.connection(directory);
    }
public int getId(){
        String usua = usuario1.usuario;
        String query_encontrarid = "SELECT ID FROM Personas WHERE Usuario='" + usua + "'";
        String titles_table[] = {"ID"};
        DefaultTableModel CheckID = new DefaultTableModel(null, titles_table);
        String Results[] = new String[1];
        CheckID = db.SEARCH(conectar, query_encontrarid, Results, CheckID);
        String idtabla = ""+CheckID.getValueAt(0,0);
        int idusuario = parseInt(idtabla);
        return idusuario;
    }
 public JButton getBackButton() {
        return buttonLogOut;
    }
 public void setgreetLabel(){
     greetLabel.setText("Saludos "+usuario1.usuario);
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPanePlaces = new javax.swing.JTabbedPane();
        gymPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        buttonReserveGym = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        buttonReserveGame = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jCalendar2 = new com.toedter.calendar.JCalendar();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        studyPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        buttonReserveStudy = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jCalendar3 = new com.toedter.calendar.JCalendar();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        poolPanel = new javax.swing.JPanel();
        messlabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonReservePool = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jCalendar4 = new com.toedter.calendar.JCalendar();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        reservesPanel = new javax.swing.JPanel();
        buttonSearch = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        labelSubName1 = new javax.swing.JLabel();
        labelSubName2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        labelSubName3 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lowerPanel = new javax.swing.JPanel();
        greetLabel = new javax.swing.JLabel();
        buttonLogOut = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(750, 560));
        setLayout(new java.awt.BorderLayout());

        gymPanel.setLayout(null);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 12, 84), 5));

        jLabel7.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        jLabel7.setText("Disponibilidad");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 183, 189), 5));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        gymPanel.add(jPanel6);
        jPanel6.setBounds(480, 30, 190, 60);

        buttonReserveGym.setBackground(new java.awt.Color(255, 255, 255));
        buttonReserveGym.setForeground(new java.awt.Color(255, 255, 255));
        buttonReserveGym.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/button_reservar.png"))); // NOI18N
        buttonReserveGym.setBorderPainted(false);
        buttonReserveGym.setContentAreaFilled(false);
        buttonReserveGym.setFocusPainted(false);
        buttonReserveGym.setMaximumSize(new java.awt.Dimension(270, 62));
        buttonReserveGym.setMinimumSize(new java.awt.Dimension(270, 62));
        buttonReserveGym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReserveGymActionPerformed(evt);
            }
        });
        gymPanel.add(buttonReserveGym);
        buttonReserveGym.setBounds(510, 310, 120, 50);

        jLabel5.setFont(new java.awt.Font("PingFang TC", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 183, 189));
        jLabel5.setText("  Escoga el d√≠a que desea reservar el gimnasio");
        jLabel5.setOpaque(true);
        gymPanel.add(jLabel5);
        jLabel5.setBounds(30, 60, 370, 40);

        jCalendar1.setBackground(new java.awt.Color(255, 0, 51));
        gymPanel.add(jCalendar1);
        jCalendar1.setBounds(30, 100, 370, 270);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7 am", "8 am", "9 am", "10 am", "11 am", "12 pm", "1 pm", "2 pm", "3 pm", "4 pm", "5 pm", "6 pm", "7 pm", "8 pm", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gymPanel.add(jComboBox1);
        jComboBox1.setBounds(500, 180, 140, 20);

        jButton2.setText("Revisar Disponibilidad");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gymPanel.add(jButton2);
        jButton2.setBounds(480, 250, 170, 22);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/IMG_1795.jpg"))); // NOI18N
        gymPanel.add(jLabel6);
        jLabel6.setBounds(0, 0, 760, 460);

        TabbedPanePlaces.addTab("Gimnasio", gymPanel);

        gamePanel.setLayout(null);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 12, 84), 5));

        jLabel10.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        jLabel10.setText("Disponibilidad");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 183, 189), 5));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        gamePanel.add(jPanel7);
        jPanel7.setBounds(480, 30, 190, 60);

        buttonReserveGame.setBackground(new java.awt.Color(255, 255, 255));
        buttonReserveGame.setForeground(new java.awt.Color(255, 255, 255));
        buttonReserveGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/button_reservar.png"))); // NOI18N
        buttonReserveGame.setBorderPainted(false);
        buttonReserveGame.setContentAreaFilled(false);
        buttonReserveGame.setFocusPainted(false);
        buttonReserveGame.setMaximumSize(new java.awt.Dimension(270, 62));
        buttonReserveGame.setMinimumSize(new java.awt.Dimension(270, 62));
        buttonReserveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReserveGameActionPerformed(evt);
            }
        });
        gamePanel.add(buttonReserveGame);
        buttonReserveGame.setBounds(520, 330, 120, 50);

        jLabel9.setFont(new java.awt.Font("PingFang TC", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 183, 189));
        jLabel9.setText("  Escoga el d√≠a que desea reservar la zona de juegos");
        jLabel9.setOpaque(true);
        gamePanel.add(jLabel9);
        jLabel9.setBounds(20, 60, 390, 40);
        gamePanel.add(jCalendar2);
        jCalendar2.setBounds(20, 100, 390, 290);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7 am", "8 am", "9 am", "10 am", "11 am", "12 pm", "1 pm", "2 pm", "3 pm", "4 pm", "5 pm", "6 pm", "7 pm", "8 pm" }));
        gamePanel.add(jComboBox4);
        jComboBox4.setBounds(510, 190, 140, 22);
        gamePanel.add(jLabel12);
        jLabel12.setBounds(460, 180, 0, 0);

        jButton3.setText("Revisar Disponibilidad");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gamePanel.add(jButton3);
        jButton3.setBounds(500, 250, 170, 22);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/IMG_1793.jpg"))); // NOI18N
        gamePanel.add(jLabel1);
        jLabel1.setBounds(0, 0, 760, 470);

        jLabel14.setFont(new java.awt.Font("PingFang TC", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 183, 189));
        jLabel14.setText("  Escoga el d√≠a que desea reservar el gimnasio");
        jLabel14.setOpaque(true);
        gamePanel.add(jLabel14);
        jLabel14.setBounds(40, 60, 360, 40);

        TabbedPanePlaces.addTab("Zona de Juegos", gamePanel);

        studyPanel.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 12, 84), 5));

        jLabel4.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        jLabel4.setText("Disponibilidad");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 183, 189), 5));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        studyPanel.add(jPanel8);
        jPanel8.setBounds(480, 30, 190, 60);

        buttonReserveStudy.setBackground(new java.awt.Color(255, 255, 255));
        buttonReserveStudy.setForeground(new java.awt.Color(255, 255, 255));
        buttonReserveStudy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/button_reservar.png"))); // NOI18N
        buttonReserveStudy.setBorderPainted(false);
        buttonReserveStudy.setContentAreaFilled(false);
        buttonReserveStudy.setFocusPainted(false);
        buttonReserveStudy.setMaximumSize(new java.awt.Dimension(270, 62));
        buttonReserveStudy.setMinimumSize(new java.awt.Dimension(270, 62));
        buttonReserveStudy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReserveStudyActionPerformed(evt);
            }
        });
        studyPanel.add(buttonReserveStudy);
        buttonReserveStudy.setBounds(520, 340, 120, 50);

        jLabel13.setFont(new java.awt.Font("PingFang TC", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 183, 189));
        jLabel13.setText("  Escoga el d√≠a que desea reservar la zona de estudio");
        jLabel13.setOpaque(true);
        studyPanel.add(jLabel13);
        jLabel13.setBounds(20, 60, 390, 40);
        studyPanel.add(jCalendar3);
        jCalendar3.setBounds(20, 100, 390, 300);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7 am", "8 am", "9 am", "10 am", "11 am", "12 pm", "1 pm", "2 pm", "3 pm", "4 pm", "5 pm", "6 pm", "7 pm", "8 pm" }));
        studyPanel.add(jComboBox3);
        jComboBox3.setBounds(520, 200, 130, 22);

        jButton4.setText("Revisar Disponibilidad");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        studyPanel.add(jButton4);
        jButton4.setBounds(510, 260, 150, 22);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/IMG_1786.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        studyPanel.add(jLabel11);
        jLabel11.setBounds(0, 0, 760, 450);

        TabbedPanePlaces.addTab("Zona de Estudio", studyPanel);

        poolPanel.setBackground(new java.awt.Color(255, 255, 255));
        poolPanel.setLayout(null);

        messlabel.setBackground(new java.awt.Color(255, 255, 255));
        messlabel.setFont(new java.awt.Font("PT Serif Caption", 1, 24)); // NOI18N
        messlabel.setForeground(new java.awt.Color(51, 51, 255));
        poolPanel.add(messlabel);
        messlabel.setBounds(390, 180, 110, 50);

        jLabel2.setFont(new java.awt.Font("PingFang TC", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 183, 189));
        jLabel2.setText("   Escoga el d√≠a que desea reservar la piscina");
        jLabel2.setOpaque(true);
        poolPanel.add(jLabel2);
        jLabel2.setBounds(20, 60, 370, 40);

        buttonReservePool.setBackground(new java.awt.Color(255, 255, 255));
        buttonReservePool.setForeground(new java.awt.Color(255, 255, 255));
        buttonReservePool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/button_reservar.png"))); // NOI18N
        buttonReservePool.setBorderPainted(false);
        buttonReservePool.setContentAreaFilled(false);
        buttonReservePool.setFocusPainted(false);
        buttonReservePool.setMaximumSize(new java.awt.Dimension(270, 62));
        buttonReservePool.setMinimumSize(new java.awt.Dimension(270, 62));
        buttonReservePool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReservePoolActionPerformed(evt);
            }
        });
        poolPanel.add(buttonReservePool);
        buttonReservePool.setBounds(500, 340, 120, 50);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 12, 84), 5));

        jLabel3.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        jLabel3.setText("Disponibilidad");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 183, 189), 5));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        poolPanel.add(jPanel2);
        jPanel2.setBounds(480, 30, 190, 60);
        poolPanel.add(jCalendar4);
        jCalendar4.setBounds(20, 100, 370, 300);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7 am", "8 am", "9 am", "10 am", "11 am", "12 pm", "1 pm", "2 pm", "3 pm", "4 pm", "5 pm", "6 pm", "7 pm", "8 pm" }));
        poolPanel.add(jComboBox2);
        jComboBox2.setBounds(500, 210, 140, 22);

        jButton5.setText("Revisar Disponibilidad");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        poolPanel.add(jButton5);
        jButton5.setBounds(490, 270, 160, 22);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/IMG_1781.jpg"))); // NOI18N
        poolPanel.add(jLabel8);
        jLabel8.setBounds(0, -10, 760, 480);

        TabbedPanePlaces.addTab("Piscina", poolPanel);

        reservesPanel.setLayout(null);

        buttonSearch.setText("Buscar");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });
        reservesPanel.add(buttonSearch);
        buttonSearch.setBounds(610, 70, 130, 40);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Usuario", "Zona", "D√≠a", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable1);

        reservesPanel.add(jScrollPane5);
        jScrollPane5.setBounds(20, 120, 720, 270);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 12, 84), 5));

        jLabel20.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        jLabel20.setText("Busca tus reservas ya!");
        jLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 183, 189), 5));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        reservesPanel.add(jPanel9);
        jPanel9.setBounds(30, 50, 290, 60);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/reserva2.jpeg"))); // NOI18N
        reservesPanel.add(jLabel19);
        jLabel19.setBounds(0, 0, 760, 490);

        TabbedPanePlaces.addTab("Mis Reservas", reservesPanel);

        helpPanel.setLayout(null);
        helpPanel.add(jLabel15);
        jLabel15.setBounds(350, 100, 0, 0);
        helpPanel.add(jLabel16);
        jLabel16.setBounds(317, 29, 0, 0);
        helpPanel.add(jLabel17);
        jLabel17.setBounds(317, 51, 0, 0);

        jPanel4.setBackground(new java.awt.Color(0, 204, 204));
        jPanel4.setLayout(null);

        labelSubName1.setBackground(new java.awt.Color(255, 255, 255));
        labelSubName1.setFont(new java.awt.Font("PT Serif Caption", 1, 30)); // NOI18N
        labelSubName1.setForeground(new java.awt.Color(255, 255, 255));
        labelSubName1.setText("un correo a: livinnxreservas@gmail.com");
        jPanel4.add(labelSubName1);
        labelSubName1.setBounds(10, 60, 780, 71);

        labelSubName2.setBackground(new java.awt.Color(255, 255, 255));
        labelSubName2.setFont(new java.awt.Font("PT Serif Caption", 1, 30)); // NOI18N
        labelSubName2.setForeground(new java.awt.Color(255, 255, 255));
        labelSubName2.setText(" Si tiene alg√∫n inconveniente envienos");
        jPanel4.add(labelSubName2);
        labelSubName2.setBounds(0, 10, 710, 71);

        jPanel5.setBackground(new java.awt.Color(210, 12, 84));
        jPanel5.setLayout(null);

        labelSubName3.setBackground(new java.awt.Color(255, 255, 255));
        labelSubName3.setFont(new java.awt.Font("PT Serif Caption", 1, 30)); // NOI18N
        labelSubName3.setForeground(new java.awt.Color(255, 255, 255));
        labelSubName3.setText("O llamenos al n√∫mero (+57) 3135434528");
        jPanel5.add(labelSubName3);
        labelSubName3.setBounds(10, 20, 780, 71);

        jPanel4.add(jPanel5);
        jPanel5.setBounds(0, 150, 750, 110);

        helpPanel.add(jPanel4);
        jPanel4.setBounds(20, 70, 650, 260);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/Ayuda.jpeg"))); // NOI18N
        helpPanel.add(jLabel18);
        jLabel18.setBounds(0, -10, 770, 480);

        TabbedPanePlaces.addTab("Ayuda", helpPanel);

        add(TabbedPanePlaces, java.awt.BorderLayout.CENTER);

        lowerPanel.setBackground(new java.awt.Color(153, 153, 153));
        lowerPanel.setInheritsPopupMenu(true);
        lowerPanel.setPreferredSize(new java.awt.Dimension(757, 53));

        greetLabel.setFont(new java.awt.Font("PingFang TC", 1, 24)); // NOI18N
        greetLabel.setForeground(new java.awt.Color(255, 255, 255));

        buttonLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/livinnx/resources/button_logOut.png"))); // NOI18N
        buttonLogOut.setBorderPainted(false);
        buttonLogOut.setContentAreaFilled(false);
        buttonLogOut.setFocusable(false);

        javax.swing.GroupLayout lowerPanelLayout = new javax.swing.GroupLayout(lowerPanel);
        lowerPanel.setLayout(lowerPanelLayout);
        lowerPanelLayout.setHorizontalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(greetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(buttonLogOut))
        );
        lowerPanelLayout.setVerticalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonLogOut)
                    .addComponent(greetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 5, Short.MAX_VALUE))
        );

        add(lowerPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonReserveGymActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReserveGymActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar1.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact =new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha de reserva seleccionada es de d√≠as pasados");
            }
            else
            {
                dia = DF.format(jCalendar1.getDate());
                System.out.println(dia);
                switch (jComboBox1.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }
                String query_revisarh = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=1";
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckHor = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckHor = db.SEARCH(conectar, query_revisarh, Results, CheckHor);
                int cont = CheckHor.getRowCount();

                if (cont == 4){
                    JOptionPane.showMessageDialog(null, "No hay aforo disponible en este horario");
                } else {
                    String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE ID_Usuario = '" + idusua + "' AND D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=1";
                    System.out.println(query_buscarusuario);
                    String titulos_tabla[] = {"D√≠a", "Hora"};
                    DefaultTableModel CheckR = new DefaultTableModel(null, titulos_tabla);
                    String Resultados[] = new String[2];
                    CheckR = db.SEARCH(conectar, query_buscarusuario, Resultados, CheckR);
                    int contadorus = CheckR.getRowCount();

                    if (contadorus != 0) {
                        JOptionPane.showMessageDialog(null, "Este horario ya fue reservado por usted");
                    } else {
                        String query_add_reserva = "INSERT INTO Reservas (D√≠a,Hora,Area,ID_Usuario)" + "VALUES ('" + dia + "','" + hour + "',1,'" + idusua + "')";
                        System.out.println(query_add_reserva);
                        db.add_edit_delete(conectar, query_add_reserva);
                        JOptionPane.showMessageDialog(null, "La reserva se realiz√≥ correctamente");
                    }
                }

            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonReserveGymActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar1.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact = new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha seleccionada es de d√≠as pasados");
            } else {
                dia = DF.format(jCalendar1.getDate());
                System.out.println(dia);
                switch (jComboBox1.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }

                String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=1";
                System.out.println(query_buscarusuario);
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckR = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckR = db.SEARCH(conectar, query_buscarusuario, Results, CheckR);
                int cont = CheckR.getRowCount();

                if (cont == 4) {
                    JOptionPane.showMessageDialog(null, "Ya no quedan reservas para este horario");
                } else {
                    if(cont == 3){
                        JOptionPane.showMessageDialog(null, "Queda una sola reserva disponible para este horario");
                    } else {
                        if (cont == 2) {
                            JOptionPane.showMessageDialog(null, "Quedan dos reservas disponibles para este horario");
                        } else {
                            if (cont == 1) {
                                JOptionPane.showMessageDialog(null, "Quedan tres reservas disponibles para este horario");
                            } else {
                                if (cont == 0) {
                                    JOptionPane.showMessageDialog(null, "Todo el aforo se encuentre disponible para este horario");
                                }
                            }
                        }
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void buttonReserveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReserveGameActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar2.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact =new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha de reserva seleccionada es de d√≠as pasados");
            }
            else
            {
                dia = DF.format(jCalendar2.getDate());
                System.out.println(dia);
                switch (jComboBox4.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }
                String query_revisarh = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=2";
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckHor = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckHor = db.SEARCH(conectar, query_revisarh, Results, CheckHor);
                int cont = CheckHor.getRowCount();

                if (cont == 4){
                    JOptionPane.showMessageDialog(null, "No hay aforo disponible en este horario");
                } else {
                    String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE ID_Usuario = '" + idusua + "' AND D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=2";
                    System.out.println(query_buscarusuario);
                    String titulos_tabla[] = {"D√≠a", "Hora"};
                    DefaultTableModel CheckR = new DefaultTableModel(null, titulos_tabla);
                    String Resultados[] = new String[2];
                    CheckR = db.SEARCH(conectar, query_buscarusuario, Resultados, CheckR);
                    int contadorus = CheckR.getRowCount();

                    if (contadorus != 0) {
                        JOptionPane.showMessageDialog(null, "Este horario ya fue reservado por usted");
                    } else {
                        String query_add_reserva = "INSERT INTO Reservas (D√≠a,Hora,Area,ID_Usuario)" + "VALUES ('" + dia + "','" + hour + "',2,'" + idusua + "')";
                        System.out.println(query_add_reserva);
                        db.add_edit_delete(conectar, query_add_reserva);
                        JOptionPane.showMessageDialog(null, "La reserva se realiz√≥ correctamente");
                    }
                }

            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonReserveGameActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar2.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact = new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha seleccionada es de d√≠as pasados");
            } else {
                dia = DF.format(jCalendar2.getDate());
                System.out.println(dia);
                switch (jComboBox4.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }

                String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=2";
                System.out.println(query_buscarusuario);
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckR = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckR = db.SEARCH(conectar, query_buscarusuario, Results, CheckR);
                int cont = CheckR.getRowCount();

                if (cont == 8) {
                    JOptionPane.showMessageDialog(null, "Ya no quedan reservas para este horario");
                } else {
                    if (cont == 7) {
                        JOptionPane.showMessageDialog(null, "Queda una sola reserva disponible para este horario");
                    } else {
                        if (cont == 6) {
                            JOptionPane.showMessageDialog(null, "Quedan dos reservas disponibles para este horario");
                        } else {
                            if (cont == 5) {
                                JOptionPane.showMessageDialog(null, "Quedan tres reservas disponibles para este horario");
                            } else {
                                if (cont == 4) {
                                    JOptionPane.showMessageDialog(null, "Quedan cuatro reservas disponibles para este horario");
                                } else {
                                    if (cont == 3) {
                                        JOptionPane.showMessageDialog(null, "Quedan cinco reservas disponibles para este horario");
                                    } else {
                                        if (cont == 2) {
                                            JOptionPane.showMessageDialog(null, "Quedan seis reservas disponibles para este horario");
                                        } else {
                                            if (cont == 1) {
                                                JOptionPane.showMessageDialog(null, "Quedan siete reservas disponibles para este horario");
                                            } else {
                                                if (cont == 0) {
                                                    JOptionPane.showMessageDialog(null, "Todo el aforo se encuentre disponible para este horario");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void buttonReserveStudyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReserveStudyActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar3.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact =new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha de reserva seleccionada es de d√≠as pasados");
            }
            else
            {
                dia = DF.format(jCalendar3.getDate());
                System.out.println(dia);
                switch (jComboBox3.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }
                String query_revisarh = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=3";
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckHor = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckHor = db.SEARCH(conectar, query_revisarh, Results, CheckHor);
                int cont = CheckHor.getRowCount();

                if (cont == 4){
                    JOptionPane.showMessageDialog(null, "No hay aforo disponible en este horario");
                } else {
                    String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE ID_Usuario = '" + idusua + "' AND D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=3";
                    System.out.println(query_buscarusuario);
                    String titulos_tabla[] = {"D√≠a", "Hora"};
                    DefaultTableModel CheckR = new DefaultTableModel(null, titulos_tabla);
                    String Resultados[] = new String[2];
                    CheckR = db.SEARCH(conectar, query_buscarusuario, Resultados, CheckR);
                    int contadorus = CheckR.getRowCount();

                    if (contadorus != 0) {
                        JOptionPane.showMessageDialog(null, "Este horario ya fue reservado por usted");
                    } else {
                        String query_add_reserva = "INSERT INTO Reservas (D√≠a,Hora,Area,ID_Usuario)" + "VALUES ('" + dia + "','" + hour + "',3,'" + idusua + "')";
                        System.out.println(query_add_reserva);
                        db.add_edit_delete(conectar, query_add_reserva);
                        JOptionPane.showMessageDialog(null, "La reserva se realiz√≥ correctamente");
                    }
                }

            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonReserveStudyActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar3.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact = new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha seleccionada es de d√≠as pasados");
            } else {
                dia = DF.format(jCalendar3.getDate());
                System.out.println(dia);
                switch (jComboBox3.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }

                String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=3";
                System.out.println(query_buscarusuario);
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckR = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckR = db.SEARCH(conectar, query_buscarusuario, Results, CheckR);
                int cont = CheckR.getRowCount();

                if (cont == 15) {
                    JOptionPane.showMessageDialog(null, "Ya no quedan reservas para este horario");
                } else {
                    if (cont == 14) {
                        JOptionPane.showMessageDialog(null, "Queda una sola reserva disponible para este horario");
                    } else {
                        if (cont == 13) {
                            JOptionPane.showMessageDialog(null, "Quedan dos reservas disponibles para este horario");
                        } else {
                            if (cont == 12) {
                                JOptionPane.showMessageDialog(null, "Quedan tres reservas disponibles para este horario");
                            } else {
                                if (cont == 11) {
                                    JOptionPane.showMessageDialog(null, "Quedan cuatro reservas disponibles para este horario");
                                } else {
                                    if (cont == 10) {
                                        JOptionPane.showMessageDialog(null, "Quedan cinco reservas disponibles para este horario");
                                    } else {
                                        if (cont == 9) {
                                            JOptionPane.showMessageDialog(null, "Quedan seis reservas disponibles para este horario");
                                        } else {
                                            if (cont == 8) {
                                                JOptionPane.showMessageDialog(null, "Quedan siete reservas disponibles para este horario");
                                            } else {
                                                if (cont == 7) {
                                                    JOptionPane.showMessageDialog(null, "Quedan ocho reservas disponibles para este horario");
                                                } else {
                                                    if (cont == 6) {
                                                        JOptionPane.showMessageDialog(null, "Quedan nueve reservas disponibles para este horario");
                                                    } else {
                                                        if (cont == 5) {
                                                            JOptionPane.showMessageDialog(null, "Quedan diez reservas disponibles para este horario");
                                                        } else {
                                                            if (cont == 4) {
                                                                JOptionPane.showMessageDialog(null, "Quedan once reservas disponibles para este horario");
                                                            } else {
                                                                if (cont == 3) {
                                                                    JOptionPane.showMessageDialog(null, "Quedan doce reservas disponibles para este horario");
                                                                } else {
                                                                    if (cont == 2) {
                                                                        JOptionPane.showMessageDialog(null, "Quedan trece reservas disponibles para este horario");
                                                                    } else {
                                                                        if (cont == 1) {
                                                                            JOptionPane.showMessageDialog(null, "Quedan catorce reservas disponibles para este horario");
                                                                        } else {
                                                                            if (cont == 0) {
                                                                                JOptionPane.showMessageDialog(null, "Todo el aforo se encuentre disponible para este horario");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void buttonReservePoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReservePoolActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar4.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact =new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha de reserva seleccionada es de d√≠as pasados");
            }
            else
            {
                dia = DF.format(jCalendar4.getDate());
                System.out.println(dia);
                switch (jComboBox2.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }
                String query_revisarh = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=4";
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckHor = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckHor = db.SEARCH(conectar, query_revisarh, Results, CheckHor);
                int cont = CheckHor.getRowCount();

                if (cont == 4){
                    JOptionPane.showMessageDialog(null, "No hay aforo disponible en este horario");
                } else {
                    String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE ID_Usuario = '" + idusua + "' AND D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=4";
                    System.out.println(query_buscarusuario);
                    String titulos_tabla[] = {"D√≠a", "Hora"};
                    DefaultTableModel CheckR = new DefaultTableModel(null, titulos_tabla);
                    String Resultados[] = new String[2];
                    CheckR = db.SEARCH(conectar, query_buscarusuario, Resultados, CheckR);
                    int contadorus = CheckR.getRowCount();

                    if (contadorus != 0) {
                        JOptionPane.showMessageDialog(null, "Este horario ya fue reservado por usted");
                    } else {
                        String query_add_reserva = "INSERT INTO Reservas (D√≠a,Hora,Area,ID_Usuario)" + "VALUES ('" + dia + "','" + hour + "',4,'" + idusua + "')";
                        System.out.println(query_add_reserva);
                        db.add_edit_delete(conectar, query_add_reserva);
                        JOptionPane.showMessageDialog(null, "La reserva se realiz√≥ correctamente");
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonReservePoolActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String dia, hour = "";
        String diahoy = "";
        int idusua = getId();
        LocalDate date = LocalDate.now();
        Date diar = jCalendar4.getDate();
        SimpleDateFormat DF = new SimpleDateFormat("dd-MMM-yyyy");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
        diahoy = date.format(formatter);
        try {
            Date diact = new SimpleDateFormat("dd-MMM-yyyy").parse(diahoy);
            System.out.println(diact);
            if (diar.before(diact)) {
                JOptionPane.showMessageDialog(null, "La fecha seleccionada es de d√≠as pasados");
            } else {
                dia = DF.format(jCalendar4.getDate());
                System.out.println(dia);
                switch (jComboBox2.getSelectedIndex()) {
                    case 0:
                    hour = "7 a.m";
                    break;
                    case 1:
                    hour = "8 a.m";
                    break;
                    case 2:
                    hour = "9 a.m";
                    break;
                    case 3:
                    hour = "10 a.m";
                    break;
                    case 4:
                    hour = "11 a.m";
                    break;
                    case 5:
                    hour = "12 p.m";
                    break;
                    case 6:
                    hour = "1 p.m";
                    break;
                    case 7:
                    hour = "2 p.m";
                    break;
                    case 8:
                    hour = "3 p.m";
                    break;
                    case 9:
                    hour = "4 p.m";
                    break;
                    case 10:
                    hour = "5 p.m";
                    break;
                    case 11:
                    hour = "6 p.m";
                    break;
                    case 12:
                    hour = "7 p.m";
                    break;
                    case 13:
                    hour = "8 p.m";
                    break;
                    default:
                    hour = "0";
                    break;
                }

                String query_buscarusuario = "SELECT D√≠a,Hora,ID_Usuario FROM Reservas WHERE D√≠a='" + dia + "' AND Hora='" + hour + "' AND Area=4";
                System.out.println(query_buscarusuario);
                String titles_table[] = {"D√≠a", "Hora"};
                DefaultTableModel CheckR = new DefaultTableModel(null, titles_table);
                String Results[] = new String[2];
                CheckR = db.SEARCH(conectar, query_buscarusuario, Results, CheckR);
                int cont = CheckR.getRowCount();

                if (cont == 4) {
                    JOptionPane.showMessageDialog(null, "Ya no quedan reservas para este horario");
                } else {
                    if (cont == 3) {
                        JOptionPane.showMessageDialog(null, "Queda una sola reserva disponible para este horario");
                    } else {
                        if (cont == 2) {
                            JOptionPane.showMessageDialog(null, "Quedan dos reservas disponibles para este horario");
                        } else {
                            if (cont == 1) {
                                JOptionPane.showMessageDialog(null, "Quedan tres reservas disponibles para este horario");
                            } else {
                                if (cont == 0) {
                                    JOptionPane.showMessageDialog(null, "Todo el aforo se encuentre disponible para este horario");
                                }
                            }
                        }
                    }
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Reservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        String usuario = usuario1.usuario;
        System.out.println(usuario);
        int idusua = getId();
        String query_search_reserv = "SELECT PERSONAS.USUARIO,AREAS.NOMBRE,RESERVAS.D√çA,RESERVAS.HORA FROM PERSONAS,RESERVAS,AREAS WHERE Reservas.ID_Usuario='"+idusua+"' AND RESERVAS.ID_Usuario=PERSONAS.ID AND RESERVAS.AREA = AREAS.ID";
        System.out.println(query_search_reserv);
        String titles_table[] = {"Usuario","Zona","D√≠a","Hora"};
        DefaultTableModel T4 = new DefaultTableModel(null, titles_table);
        String Results[] = new String[4];
        T4 = db.SEARCH(conectar, query_search_reserv, Results, T4);
        jTable1.setModel(T4);

    }//GEN-LAST:event_buttonSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TabbedPanePlaces;
    private javax.swing.JButton buttonLogOut;
    private javax.swing.JButton buttonReserveGame;
    private javax.swing.JButton buttonReserveGym;
    private javax.swing.JButton buttonReservePool;
    private javax.swing.JButton buttonReserveStudy;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel greetLabel;
    private javax.swing.JPanel gymPanel;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private com.toedter.calendar.JCalendar jCalendar1;
    private com.toedter.calendar.JCalendar jCalendar2;
    private com.toedter.calendar.JCalendar jCalendar3;
    private com.toedter.calendar.JCalendar jCalendar4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelSubName1;
    private javax.swing.JLabel labelSubName2;
    private javax.swing.JLabel labelSubName3;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JLabel messlabel;
    private javax.swing.JPanel poolPanel;
    private javax.swing.JPanel reservesPanel;
    private javax.swing.JPanel studyPanel;
    // End of variables declaration//GEN-END:variables
}
